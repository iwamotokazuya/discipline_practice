<div class="wrapper">
  <section class="main-controls">
    <div id="buttons">
      <button class = "btn btn-dark w-25" id="record" >録音開始</button>
      <button class = "btn btn-warning w-25" id="stop" >録音停止</button>
      <button class = "btn btn-secondary w-25" id="playid" >録音再生</button>
    </div>
  </section>

  <section class="sound-clips">
  </section>

</div>

<script>
  const record = document.getElementById('record');
  const stop = document.getElementById('stop');
  const play = document.getElementById("playid");
  const result = document.getElementById("result");

  let audioCtx = null;
  let blob = null;
  let audio_sample_rate = null;
  let audioContext = null;
  let audioData = [];

  const soundClips = document.querySelector('.sound-clips');

  if (navigator.mediaDevices.getUserMedia) {
    console.log('getUserMedia supported.');
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    audioCtx = new AudioContext({ sampleRate: 11025 });

    const constraints = { audio: true };

    let onSuccess = function(stream) {
      const mediaRecorder = new MediaRecorder(stream);

      record.onclick = function() {
        mediaRecorder.start();

        stop.disabled = false;
        const timeoutId = setTimeout(function() {
          console.log('stop!!!')
          stop.click();
        }, 5000);
      }
      
      stop.onclick = function() {
        mediaRecorder.stop();
        stop.disabled = true;
        record.disabled = false;
      }
      
      play.onclick = function(e) {
        console.log(audioData);

        const clipContainer = document.createElement('article');
        const clipLabel = document.createElement('p');
        const audio = document.createElement('audio');

        clipContainer.classList.add('clip');
        audio.setAttribute('controls', '');

        clipContainer.appendChild(audio);
        clipContainer.appendChild(clipLabel);
        soundClips.appendChild(clipContainer);

        exportWAV(audioData);
        audio.controls = true;
        console.log(blob);
        const audioURL = window.URL.createObjectURL(blob);
        audio.src = audioURL;
        console.log("recorder stopped");
      }

      mediaRecorder.ondataavailable = function(e) {
        audioData.push(e.data);
      }
    }

    let onError = function(err) {
      console.log('The following error occured: ' + err);
    }

    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);

  } else {
    console.log('getUserMedia not supported on your browser!');
  }

  let exportWAV = function() {
    console.log('wav change');
    console.log(audioData);
      
    let encodeWAV = function(samples, sampleRate) {
      let buffer = new ArrayBuffer(44 + samples.length * 2);
      let view = new DataView(buffer);
      
      let writeString = function(view, offset, string) {
        for (let i = 0; i < string.length; i++){
          view.setUint8(offset + i, string.charCodeAt(i));
        }
      }
      
      let floatTo16BitPCM = function(output, offset, input) {
        for (let i = 0; i < input.length; i++, offset += 2){
          let s = Math.max(-1, Math.min(1, input[i]));
          output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
      }
      
      writeString(view, 0, 'RIFF');  // RIFFヘッダ
      view.setUint32(4, 32 + samples.length * 2, true); // これ以降のファイルサイズ
      writeString(view, 8, 'WAVE'); // WAVEヘッダ
      writeString(view, 12, 'fmt '); // fmtチャンク
      view.setUint32(16, 16, true); // fmtチャンクのバイト数
      view.setUint16(20, 1, true); // フォーマットID
      view.setUint16(22, 1, true); // チャンネル数
      view.setUint32(24, sampleRate, true); // サンプリングレート
      view.setUint32(28, sampleRate * 2, true); // データ速度
      view.setUint16(32, 2, true); // ブロックサイズ
      view.setUint16(34, 16, true); // サンプルあたりのビット数
      writeString(view, 36, 'data'); // dataチャンク
      view.setUint32(40, samples.length * 2, true); // 波形データのバイト数
      floatTo16BitPCM(view, 44, samples); // 波形データ
      
      return view;
    }
      
    let mergeBuffers = function(audioData) {
      let sampleLength = 0;
      for (let i = 0; i < audioData.length; i++) {
        sampleLength += audioData[i].length;
      }
      let samples = new Float32Array(sampleLength);
      let sampleIdx = 0;
      for (let i = 0; i < audioData.length; i++) {
        for (let j = 0; j < audioData[i].length; j++) {
          samples[sampleIdx] = audioData[i][j];
          sampleIdx++;
        }
      }
      return samples;
    }
      
    let dataview = encodeWAV(mergeBuffers(audioData), audioCtx.sampleRate);
    blob = new Blob([dataview], { type: 'audio/wav' });
  }
</script>